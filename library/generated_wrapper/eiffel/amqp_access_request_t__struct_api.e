note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_ACCESS_REQUEST_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	realm: POINTER
			-- Access member `realm`
		require
			exists: exists
		do
			Result := c_realm (item) 
		ensure
		end

	set_realm (a_value: POINTER )
			-- Set member `realm`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_realm (item, a_value)
		ensure
			realm_set: realm = a_value 		end

	exclusive: INTEGER
			-- Access member `exclusive`
		require
			exists: exists
		do
			Result := c_exclusive (item)
		ensure
			result_correct: Result = c_exclusive (item)
		end

	set_exclusive (a_value: INTEGER) 
			-- Change the value of member `exclusive` to `a_value`.
		require
			exists: exists
		do
			set_c_exclusive (item, a_value)
		ensure
			exclusive_set: a_value = exclusive
		end

	passive: INTEGER
			-- Access member `passive`
		require
			exists: exists
		do
			Result := c_passive (item)
		ensure
			result_correct: Result = c_passive (item)
		end

	set_passive (a_value: INTEGER) 
			-- Change the value of member `passive` to `a_value`.
		require
			exists: exists
		do
			set_c_passive (item, a_value)
		ensure
			passive_set: a_value = passive
		end

	active: INTEGER
			-- Access member `active`
		require
			exists: exists
		do
			Result := c_active (item)
		ensure
			result_correct: Result = c_active (item)
		end

	set_active (a_value: INTEGER) 
			-- Change the value of member `active` to `a_value`.
		require
			exists: exists
		do
			set_c_active (item, a_value)
		ensure
			active_set: a_value = active
		end

	write: INTEGER
			-- Access member `write`
		require
			exists: exists
		do
			Result := c_write (item)
		ensure
			result_correct: Result = c_write (item)
		end

	set_write (a_value: INTEGER) 
			-- Change the value of member `write` to `a_value`.
		require
			exists: exists
		do
			set_c_write (item, a_value)
		ensure
			write_set: a_value = write
		end

	read: INTEGER
			-- Access member `read`
		require
			exists: exists
		do
			Result := c_read (item)
		ensure
			result_correct: Result = c_read (item)
		end

	set_read (a_value: INTEGER) 
			-- Change the value of member `read` to `a_value`.
		require
			exists: exists
		do
			set_c_read (item, a_value)
		ensure
			read_set: a_value = read
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_access_request_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_access_request_t_)"
		end

	c_realm (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_access_request_t_*)$an_item)->realm
			]"
		end

	set_c_realm (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->realm =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_exclusive (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->exclusive
			]"
		end

	set_c_exclusive (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->exclusive =  (amqp_boolean_t)$a_value
			]"
		ensure
			exclusive_set: a_value = c_exclusive (an_item)
		end

	c_passive (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->passive
			]"
		end

	set_c_passive (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->passive =  (amqp_boolean_t)$a_value
			]"
		ensure
			passive_set: a_value = c_passive (an_item)
		end

	c_active (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->active
			]"
		end

	set_c_active (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->active =  (amqp_boolean_t)$a_value
			]"
		ensure
			active_set: a_value = c_active (an_item)
		end

	c_write (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->write
			]"
		end

	set_c_write (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->write =  (amqp_boolean_t)$a_value
			]"
		ensure
			write_set: a_value = c_write (an_item)
		end

	c_read (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->read
			]"
		end

	set_c_read (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_access_request_t_*)$an_item)->read =  (amqp_boolean_t)$a_value
			]"
		ensure
			read_set: a_value = c_read (an_item)
		end

end
