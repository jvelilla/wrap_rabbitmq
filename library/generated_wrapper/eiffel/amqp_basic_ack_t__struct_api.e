note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_BASIC_ACK_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	delivery_tag: NATURAL_64
			-- Access member `delivery_tag`
		require
			exists: exists
		do
			Result := c_delivery_tag (item)
		ensure
			result_correct: Result = c_delivery_tag (item)
		end

	set_delivery_tag (a_value: NATURAL_64) 
			-- Change the value of member `delivery_tag` to `a_value`.
		require
			exists: exists
		do
			set_c_delivery_tag (item, a_value)
		ensure
			delivery_tag_set: a_value = delivery_tag
		end

	multiple: INTEGER
			-- Access member `multiple`
		require
			exists: exists
		do
			Result := c_multiple (item)
		ensure
			result_correct: Result = c_multiple (item)
		end

	set_multiple (a_value: INTEGER) 
			-- Change the value of member `multiple` to `a_value`.
		require
			exists: exists
		do
			set_c_multiple (item, a_value)
		ensure
			multiple_set: a_value = multiple
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_basic_ack_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_basic_ack_t_)"
		end

	c_delivery_tag (an_item: POINTER): NATURAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_ack_t_*)$an_item)->delivery_tag
			]"
		end

	set_c_delivery_tag (an_item: POINTER; a_value: NATURAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_ack_t_*)$an_item)->delivery_tag =  (uint64_t)$a_value
			]"
		ensure
			delivery_tag_set: a_value = c_delivery_tag (an_item)
		end

	c_multiple (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_ack_t_*)$an_item)->multiple
			]"
		end

	set_c_multiple (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_ack_t_*)$an_item)->multiple =  (amqp_boolean_t)$a_value
			]"
		ensure
			multiple_set: a_value = c_multiple (an_item)
		end

end
