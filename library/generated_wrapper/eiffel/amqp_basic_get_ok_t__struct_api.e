note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_BASIC_GET_OK_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	delivery_tag: NATURAL_64
			-- Access member `delivery_tag`
		require
			exists: exists
		do
			Result := c_delivery_tag (item)
		ensure
			result_correct: Result = c_delivery_tag (item)
		end

	set_delivery_tag (a_value: NATURAL_64) 
			-- Change the value of member `delivery_tag` to `a_value`.
		require
			exists: exists
		do
			set_c_delivery_tag (item, a_value)
		ensure
			delivery_tag_set: a_value = delivery_tag
		end

	redelivered: INTEGER
			-- Access member `redelivered`
		require
			exists: exists
		do
			Result := c_redelivered (item)
		ensure
			result_correct: Result = c_redelivered (item)
		end

	set_redelivered (a_value: INTEGER) 
			-- Change the value of member `redelivered` to `a_value`.
		require
			exists: exists
		do
			set_c_redelivered (item, a_value)
		ensure
			redelivered_set: a_value = redelivered
		end

	exchange: POINTER
			-- Access member `exchange`
		require
			exists: exists
		do
			Result := c_exchange (item) 
		ensure
		end

	set_exchange (a_value: POINTER )
			-- Set member `exchange`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_exchange (item, a_value)
		ensure
			exchange_set: exchange = a_value 		end

	routing_key: POINTER
			-- Access member `routing_key`
		require
			exists: exists
		do
			Result := c_routing_key (item) 
		ensure
		end

	set_routing_key (a_value: POINTER )
			-- Set member `routing_key`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_routing_key (item, a_value)
		ensure
			routing_key_set: routing_key = a_value 		end

	message_count: NATURAL
			-- Access member `message_count`
		require
			exists: exists
		do
			Result := c_message_count (item)
		ensure
			result_correct: Result = c_message_count (item)
		end

	set_message_count (a_value: NATURAL) 
			-- Change the value of member `message_count` to `a_value`.
		require
			exists: exists
		do
			set_c_message_count (item, a_value)
		ensure
			message_count_set: a_value = message_count
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_basic_get_ok_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_basic_get_ok_t_)"
		end

	c_delivery_tag (an_item: POINTER): NATURAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->delivery_tag
			]"
		end

	set_c_delivery_tag (an_item: POINTER; a_value: NATURAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->delivery_tag =  (uint64_t)$a_value
			]"
		ensure
			delivery_tag_set: a_value = c_delivery_tag (an_item)
		end

	c_redelivered (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->redelivered
			]"
		end

	set_c_redelivered (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->redelivered =  (amqp_boolean_t)$a_value
			]"
		ensure
			redelivered_set: a_value = c_redelivered (an_item)
		end

	c_exchange (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_get_ok_t_*)$an_item)->exchange
			]"
		end

	set_c_exchange (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->exchange =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_routing_key (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_get_ok_t_*)$an_item)->routing_key
			]"
		end

	set_c_routing_key (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->routing_key =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_message_count (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->message_count
			]"
		end

	set_c_message_count (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_ok_t_*)$an_item)->message_count =  (uint32_t)$a_value
			]"
		ensure
			message_count_set: a_value = c_message_count (an_item)
		end

end
