note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_BASIC_GET_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	ticket: NATURAL
			-- Access member `ticket`
		require
			exists: exists
		do
			Result := c_ticket (item)
		ensure
			result_correct: Result = c_ticket (item)
		end

	set_ticket (a_value: NATURAL) 
			-- Change the value of member `ticket` to `a_value`.
		require
			exists: exists
		do
			set_c_ticket (item, a_value)
		ensure
			ticket_set: a_value = ticket
		end

	queue: POINTER
			-- Access member `queue`
		require
			exists: exists
		do
			Result := c_queue (item) 
		ensure
		end

	set_queue (a_value: POINTER )
			-- Set member `queue`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_queue (item, a_value)
		ensure
			queue_set: queue = a_value 		end

	no_ack: INTEGER
			-- Access member `no_ack`
		require
			exists: exists
		do
			Result := c_no_ack (item)
		ensure
			result_correct: Result = c_no_ack (item)
		end

	set_no_ack (a_value: INTEGER) 
			-- Change the value of member `no_ack` to `a_value`.
		require
			exists: exists
		do
			set_c_no_ack (item, a_value)
		ensure
			no_ack_set: a_value = no_ack
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_basic_get_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_basic_get_t_)"
		end

	c_ticket (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_t_*)$an_item)->ticket
			]"
		end

	set_c_ticket (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_t_*)$an_item)->ticket =  (uint16_t)$a_value
			]"
		ensure
			ticket_set: a_value = c_ticket (an_item)
		end

	c_queue (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_get_t_*)$an_item)->queue
			]"
		end

	set_c_queue (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_t_*)$an_item)->queue =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_no_ack (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_t_*)$an_item)->no_ack
			]"
		end

	set_c_no_ack (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_get_t_*)$an_item)->no_ack =  (amqp_boolean_t)$a_value
			]"
		ensure
			no_ack_set: a_value = c_no_ack (an_item)
		end

end
