note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_BASIC_PROPERTIES_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	flags: NATURAL
			-- Access member `_flags`
		require
			exists: exists
		do
			Result := c_flags (item)
		ensure
			result_correct: Result = c_flags (item)
		end

	set_flags (a_value: NATURAL) 
			-- Change the value of member `_flags` to `a_value`.
		require
			exists: exists
		do
			set_c_flags (item, a_value)
		ensure
			flags_set: a_value = flags
		end

	content_type: POINTER
			-- Access member `content_type`
		require
			exists: exists
		do
			Result := c_content_type (item) 
		ensure
		end

	set_content_type (a_value: POINTER )
			-- Set member `content_type`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_content_type (item, a_value)
		ensure
			content_type_set: content_type = a_value 		end

	content_encoding: POINTER
			-- Access member `content_encoding`
		require
			exists: exists
		do
			Result := c_content_encoding (item) 
		ensure
		end

	set_content_encoding (a_value: POINTER )
			-- Set member `content_encoding`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_content_encoding (item, a_value)
		ensure
			content_encoding_set: content_encoding = a_value 		end

	headers: POINTER
			-- Access member `headers`
		require
			exists: exists
		do
			Result := c_headers (item) 
		ensure
		end

	set_headers (a_value: POINTER )
			-- Set member `headers`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_headers (item, a_value)
		ensure
			headers_set: headers = a_value 		end

	delivery_mode: CHARACTER
			-- Access member `delivery_mode`
		require
			exists: exists
		do
			Result := c_delivery_mode (item)
		ensure
			result_correct: Result = c_delivery_mode (item)
		end

	set_delivery_mode (a_value: CHARACTER) 
			-- Change the value of member `delivery_mode` to `a_value`.
		require
			exists: exists
		do
			set_c_delivery_mode (item, a_value)
		ensure
			delivery_mode_set: a_value = delivery_mode
		end

	priority: CHARACTER
			-- Access member `priority`
		require
			exists: exists
		do
			Result := c_priority (item)
		ensure
			result_correct: Result = c_priority (item)
		end

	set_priority (a_value: CHARACTER) 
			-- Change the value of member `priority` to `a_value`.
		require
			exists: exists
		do
			set_c_priority (item, a_value)
		ensure
			priority_set: a_value = priority
		end

	correlation_id: POINTER
			-- Access member `correlation_id`
		require
			exists: exists
		do
			Result := c_correlation_id (item) 
		ensure
		end

	set_correlation_id (a_value: POINTER )
			-- Set member `correlation_id`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_correlation_id (item, a_value)
		ensure
			correlation_id_set: correlation_id = a_value 		end

	reply_to: POINTER
			-- Access member `reply_to`
		require
			exists: exists
		do
			Result := c_reply_to (item) 
		ensure
		end

	set_reply_to (a_value: POINTER )
			-- Set member `reply_to`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_reply_to (item, a_value)
		ensure
			reply_to_set: reply_to = a_value 		end

	expiration: POINTER
			-- Access member `expiration`
		require
			exists: exists
		do
			Result := c_expiration (item) 
		ensure
		end

	set_expiration (a_value: POINTER )
			-- Set member `expiration`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_expiration (item, a_value)
		ensure
			expiration_set: expiration = a_value 		end

	message_id: POINTER
			-- Access member `message_id`
		require
			exists: exists
		do
			Result := c_message_id (item) 
		ensure
		end

	set_message_id (a_value: POINTER )
			-- Set member `message_id`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_message_id (item, a_value)
		ensure
			message_id_set: message_id = a_value 		end

	timestamp: NATURAL_64
			-- Access member `timestamp`
		require
			exists: exists
		do
			Result := c_timestamp (item)
		ensure
			result_correct: Result = c_timestamp (item)
		end

	set_timestamp (a_value: NATURAL_64) 
			-- Change the value of member `timestamp` to `a_value`.
		require
			exists: exists
		do
			set_c_timestamp (item, a_value)
		ensure
			timestamp_set: a_value = timestamp
		end

	type: POINTER
			-- Access member `type`
		require
			exists: exists
		do
			Result := c_type (item) 
		ensure
		end

	set_type (a_value: POINTER )
			-- Set member `type`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_type (item, a_value)
		ensure
			type_set: type = a_value 		end

	user_id: POINTER
			-- Access member `user_id`
		require
			exists: exists
		do
			Result := c_user_id (item) 
		ensure
		end

	set_user_id (a_value: POINTER )
			-- Set member `user_id`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_user_id (item, a_value)
		ensure
			user_id_set: user_id = a_value 		end

	app_id: POINTER
			-- Access member `app_id`
		require
			exists: exists
		do
			Result := c_app_id (item) 
		ensure
		end

	set_app_id (a_value: POINTER )
			-- Set member `app_id`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_app_id (item, a_value)
		ensure
			app_id_set: app_id = a_value 		end

	cluster_id: POINTER
			-- Access member `cluster_id`
		require
			exists: exists
		do
			Result := c_cluster_id (item) 
		ensure
		end

	set_cluster_id (a_value: POINTER )
			-- Set member `cluster_id`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_cluster_id (item, a_value)
		ensure
			cluster_id_set: cluster_id = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct amqp_basic_properties_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_basic_properties_t_)"
		end

	c_flags (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->_flags
			]"
		end

	set_c_flags (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->_flags =  (amqp_flags_t)$a_value
			]"
		ensure
			flags_set: a_value = c_flags (an_item)
		end

	c_content_type (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->content_type
			]"
		end

	set_c_content_type (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->content_type =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_content_encoding (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->content_encoding
			]"
		end

	set_c_content_encoding (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->content_encoding =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_headers (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->headers
			]"
		end

	set_c_headers (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->headers =  *(amqp_table_t*)$a_value
			]"
		end

	c_delivery_mode (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->delivery_mode
			]"
		end

	set_c_delivery_mode (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->delivery_mode =  (uint8_t)$a_value
			]"
		ensure
			delivery_mode_set: a_value = c_delivery_mode (an_item)
		end

	c_priority (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->priority
			]"
		end

	set_c_priority (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->priority =  (uint8_t)$a_value
			]"
		ensure
			priority_set: a_value = c_priority (an_item)
		end

	c_correlation_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->correlation_id
			]"
		end

	set_c_correlation_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->correlation_id =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_reply_to (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->reply_to
			]"
		end

	set_c_reply_to (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->reply_to =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_expiration (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->expiration
			]"
		end

	set_c_expiration (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->expiration =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_message_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->message_id
			]"
		end

	set_c_message_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->message_id =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_timestamp (an_item: POINTER): NATURAL_64
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->timestamp
			]"
		end

	set_c_timestamp (an_item: POINTER; a_value: NATURAL_64) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->timestamp =  (uint64_t)$a_value
			]"
		ensure
			timestamp_set: a_value = c_timestamp (an_item)
		end

	c_type (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->type
			]"
		end

	set_c_type (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->type =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_user_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->user_id
			]"
		end

	set_c_user_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->user_id =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_app_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->app_id
			]"
		end

	set_c_app_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->app_id =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_cluster_id (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_basic_properties_t_*)$an_item)->cluster_id
			]"
		end

	set_c_cluster_id (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_basic_properties_t_*)$an_item)->cluster_id =  *(amqp_bytes_t*)$a_value
			]"
		end

end
