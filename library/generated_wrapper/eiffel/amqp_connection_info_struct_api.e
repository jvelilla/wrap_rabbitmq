note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_CONNECTION_INFO_STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	user:  detachable C_STRING
			-- Access member `user`
		require
			exists: exists
		do
			if attached c_user (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_user (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_user (a_value: C_STRING) 
			-- Change the value of member `user` to `a_value`.
		require
			exists: exists
		do
			set_c_user (item, a_value.item )
		end

	password:  detachable C_STRING
			-- Access member `password`
		require
			exists: exists
		do
			if attached c_password (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_password (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_password (a_value: C_STRING) 
			-- Change the value of member `password` to `a_value`.
		require
			exists: exists
		do
			set_c_password (item, a_value.item )
		end

	host:  detachable C_STRING
			-- Access member `host`
		require
			exists: exists
		do
			if attached c_host (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_host (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_host (a_value: C_STRING) 
			-- Change the value of member `host` to `a_value`.
		require
			exists: exists
		do
			set_c_host (item, a_value.item )
		end

	vhost:  detachable C_STRING
			-- Access member `vhost`
		require
			exists: exists
		do
			if attached c_vhost (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_vhost (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_vhost (a_value: C_STRING) 
			-- Change the value of member `vhost` to `a_value`.
		require
			exists: exists
		do
			set_c_vhost (item, a_value.item )
		end

	port: INTEGER
			-- Access member `port`
		require
			exists: exists
		do
			Result := c_port (item)
		ensure
			result_correct: Result = c_port (item)
		end

	set_port (a_value: INTEGER) 
			-- Change the value of member `port` to `a_value`.
		require
			exists: exists
		do
			set_c_port (item, a_value)
		ensure
			port_set: a_value = port
		end

	ssl: INTEGER
			-- Access member `ssl`
		require
			exists: exists
		do
			Result := c_ssl (item)
		ensure
			result_correct: Result = c_ssl (item)
		end

	set_ssl (a_value: INTEGER) 
			-- Change the value of member `ssl` to `a_value`.
		require
			exists: exists
		do
			set_c_ssl (item, a_value)
		ensure
			ssl_set: a_value = ssl
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_connection_info

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_connection_info)"
		end

	c_user (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->user
			]"
		end

	set_c_user (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->user =  (char*)$a_value
			]"
		ensure
			user_set: a_value = c_user (an_item)
		end

	c_password (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->password
			]"
		end

	set_c_password (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->password =  (char*)$a_value
			]"
		ensure
			password_set: a_value = c_password (an_item)
		end

	c_host (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->host
			]"
		end

	set_c_host (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->host =  (char*)$a_value
			]"
		ensure
			host_set: a_value = c_host (an_item)
		end

	c_vhost (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->vhost
			]"
		end

	set_c_vhost (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->vhost =  (char*)$a_value
			]"
		ensure
			vhost_set: a_value = c_vhost (an_item)
		end

	c_port (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->port
			]"
		end

	set_c_port (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->port =  (int)$a_value
			]"
		ensure
			port_set: a_value = c_port (an_item)
		end

	c_ssl (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->ssl
			]"
		end

	set_c_ssl (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_info*)$an_item)->ssl =  (amqp_boolean_t)$a_value
			]"
		ensure
			ssl_set: a_value = c_ssl (an_item)
		end

end
