note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_CONNECTION_START_OK_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	client_properties: POINTER
			-- Access member `client_properties`
		require
			exists: exists
		do
			Result := c_client_properties (item) 
		ensure
		end

	set_client_properties (a_value: POINTER )
			-- Set member `client_properties`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_client_properties (item, a_value)
		ensure
			client_properties_set: client_properties = a_value 		end

	mechanism: POINTER
			-- Access member `mechanism`
		require
			exists: exists
		do
			Result := c_mechanism (item) 
		ensure
		end

	set_mechanism (a_value: POINTER )
			-- Set member `mechanism`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_mechanism (item, a_value)
		ensure
			mechanism_set: mechanism = a_value 		end

	response: POINTER
			-- Access member `response`
		require
			exists: exists
		do
			Result := c_response (item) 
		ensure
		end

	set_response (a_value: POINTER )
			-- Set member `response`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_response (item, a_value)
		ensure
			response_set: response = a_value 		end

	locale: POINTER
			-- Access member `locale`
		require
			exists: exists
		do
			Result := c_locale (item) 
		ensure
		end

	set_locale (a_value: POINTER )
			-- Set member `locale`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_locale (item, a_value)
		ensure
			locale_set: locale = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct amqp_connection_start_ok_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_connection_start_ok_t_)"
		end

	c_client_properties (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_ok_t_*)$an_item)->client_properties
			]"
		end

	set_c_client_properties (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_ok_t_*)$an_item)->client_properties =  *(amqp_table_t*)$a_value
			]"
		end

	c_mechanism (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_ok_t_*)$an_item)->mechanism
			]"
		end

	set_c_mechanism (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_ok_t_*)$an_item)->mechanism =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_response (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_ok_t_*)$an_item)->response
			]"
		end

	set_c_response (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_ok_t_*)$an_item)->response =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_locale (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_ok_t_*)$an_item)->locale
			]"
		end

	set_c_locale (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_ok_t_*)$an_item)->locale =  *(amqp_bytes_t*)$a_value
			]"
		end

end
