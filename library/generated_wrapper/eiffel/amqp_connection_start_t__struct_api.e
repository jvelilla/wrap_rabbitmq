note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_CONNECTION_START_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	version_major: CHARACTER
			-- Access member `version_major`
		require
			exists: exists
		do
			Result := c_version_major (item)
		ensure
			result_correct: Result = c_version_major (item)
		end

	set_version_major (a_value: CHARACTER) 
			-- Change the value of member `version_major` to `a_value`.
		require
			exists: exists
		do
			set_c_version_major (item, a_value)
		ensure
			version_major_set: a_value = version_major
		end

	version_minor: CHARACTER
			-- Access member `version_minor`
		require
			exists: exists
		do
			Result := c_version_minor (item)
		ensure
			result_correct: Result = c_version_minor (item)
		end

	set_version_minor (a_value: CHARACTER) 
			-- Change the value of member `version_minor` to `a_value`.
		require
			exists: exists
		do
			set_c_version_minor (item, a_value)
		ensure
			version_minor_set: a_value = version_minor
		end

	server_properties: POINTER
			-- Access member `server_properties`
		require
			exists: exists
		do
			Result := c_server_properties (item) 
		ensure
		end

	set_server_properties (a_value: POINTER )
			-- Set member `server_properties`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_server_properties (item, a_value)
		ensure
			server_properties_set: server_properties = a_value 		end

	mechanisms: POINTER
			-- Access member `mechanisms`
		require
			exists: exists
		do
			Result := c_mechanisms (item) 
		ensure
		end

	set_mechanisms (a_value: POINTER )
			-- Set member `mechanisms`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_mechanisms (item, a_value)
		ensure
			mechanisms_set: mechanisms = a_value 		end

	locales: POINTER
			-- Access member `locales`
		require
			exists: exists
		do
			Result := c_locales (item) 
		ensure
		end

	set_locales (a_value: POINTER )
			-- Set member `locales`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_locales (item, a_value)
		ensure
			locales_set: locales = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct amqp_connection_start_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_connection_start_t_)"
		end

	c_version_major (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->version_major
			]"
		end

	set_c_version_major (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->version_major =  (uint8_t)$a_value
			]"
		ensure
			version_major_set: a_value = c_version_major (an_item)
		end

	c_version_minor (an_item: POINTER): CHARACTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->version_minor
			]"
		end

	set_c_version_minor (an_item: POINTER; a_value: CHARACTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->version_minor =  (uint8_t)$a_value
			]"
		ensure
			version_minor_set: a_value = c_version_minor (an_item)
		end

	c_server_properties (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_t_*)$an_item)->server_properties
			]"
		end

	set_c_server_properties (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->server_properties =  *(amqp_table_t*)$a_value
			]"
		end

	c_mechanisms (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_t_*)$an_item)->mechanisms
			]"
		end

	set_c_mechanisms (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->mechanisms =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_locales (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_connection_start_t_*)$an_item)->locales
			]"
		end

	set_c_locales (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_connection_start_t_*)$an_item)->locales =  *(amqp_bytes_t*)$a_value
			]"
		end

end
