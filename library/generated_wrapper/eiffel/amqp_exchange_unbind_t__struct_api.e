note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_EXCHANGE_UNBIND_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	ticket: NATURAL
			-- Access member `ticket`
		require
			exists: exists
		do
			Result := c_ticket (item)
		ensure
			result_correct: Result = c_ticket (item)
		end

	set_ticket (a_value: NATURAL) 
			-- Change the value of member `ticket` to `a_value`.
		require
			exists: exists
		do
			set_c_ticket (item, a_value)
		ensure
			ticket_set: a_value = ticket
		end

	destination: POINTER
			-- Access member `destination`
		require
			exists: exists
		do
			Result := c_destination (item) 
		ensure
		end

	set_destination (a_value: POINTER )
			-- Set member `destination`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_destination (item, a_value)
		ensure
			destination_set: destination = a_value 		end

	source: POINTER
			-- Access member `source`
		require
			exists: exists
		do
			Result := c_source (item) 
		ensure
		end

	set_source (a_value: POINTER )
			-- Set member `source`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_source (item, a_value)
		ensure
			source_set: source = a_value 		end

	routing_key: POINTER
			-- Access member `routing_key`
		require
			exists: exists
		do
			Result := c_routing_key (item) 
		ensure
		end

	set_routing_key (a_value: POINTER )
			-- Set member `routing_key`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_routing_key (item, a_value)
		ensure
			routing_key_set: routing_key = a_value 		end

	nowait: INTEGER
			-- Access member `nowait`
		require
			exists: exists
		do
			Result := c_nowait (item)
		ensure
			result_correct: Result = c_nowait (item)
		end

	set_nowait (a_value: INTEGER) 
			-- Change the value of member `nowait` to `a_value`.
		require
			exists: exists
		do
			set_c_nowait (item, a_value)
		ensure
			nowait_set: a_value = nowait
		end

	arguments: POINTER
			-- Access member `arguments`
		require
			exists: exists
		do
			Result := c_arguments (item) 
		ensure
		end

	set_arguments (a_value: POINTER )
			-- Set member `arguments`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_arguments (item, a_value)
		ensure
			arguments_set: arguments = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct amqp_exchange_unbind_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_exchange_unbind_t_)"
		end

	c_ticket (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->ticket
			]"
		end

	set_c_ticket (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->ticket =  (uint16_t)$a_value
			]"
		ensure
			ticket_set: a_value = c_ticket (an_item)
		end

	c_destination (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_exchange_unbind_t_*)$an_item)->destination
			]"
		end

	set_c_destination (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->destination =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_source (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_exchange_unbind_t_*)$an_item)->source
			]"
		end

	set_c_source (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->source =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_routing_key (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_exchange_unbind_t_*)$an_item)->routing_key
			]"
		end

	set_c_routing_key (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->routing_key =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_nowait (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->nowait
			]"
		end

	set_c_nowait (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->nowait =  (amqp_boolean_t)$a_value
			]"
		ensure
			nowait_set: a_value = c_nowait (an_item)
		end

	c_arguments (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_exchange_unbind_t_*)$an_item)->arguments
			]"
		end

	set_c_arguments (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_exchange_unbind_t_*)$an_item)->arguments =  *(amqp_table_t*)$a_value
			]"
		end

end
