note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_MESSAGE_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	properties: POINTER
			-- Access member `properties`
		require
			exists: exists
		do
			Result := c_properties (item) 
		ensure
		end

	set_properties (a_value: POINTER )
			-- Set member `properties`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_properties (item, a_value)
		ensure
			properties_set: properties = a_value 		end

	body: POINTER
			-- Access member `body`
		require
			exists: exists
		do
			Result := c_body (item) 
		ensure
		end

	set_body (a_value: POINTER )
			-- Set member `body`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_body (item, a_value)
		ensure
			body_set: body = a_value 		end

	pool: POINTER
			-- Access member `pool`
		require
			exists: exists
		do
			Result := c_pool (item) 
		ensure
		end

	set_pool (a_value: POINTER )
			-- Set member `pool`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_pool (item, a_value)
		ensure
			pool_set: pool = a_value 		end

feature {NONE} -- Implementation wrapper for struct struct amqp_message_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_message_t_)"
		end

	c_properties (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_message_t_*)$an_item)->properties
			]"
		end

	set_c_properties (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_message_t_*)$an_item)->properties =  *(amqp_basic_properties_t*)$a_value
			]"
		end

	c_body (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_message_t_*)$an_item)->body
			]"
		end

	set_c_body (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_message_t_*)$an_item)->body =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_pool (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_message_t_*)$an_item)->pool
			]"
		end

	set_c_pool (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_message_t_*)$an_item)->pool =  *(amqp_pool_t*)$a_value
			]"
		end

end
