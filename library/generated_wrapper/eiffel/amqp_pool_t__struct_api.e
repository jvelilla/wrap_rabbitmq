note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_POOL_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	pagesize: NATURAL
			-- Access member `pagesize`
		require
			exists: exists
		do
			Result := c_pagesize (item)
		ensure
			result_correct: Result = c_pagesize (item)
		end

	set_pagesize (a_value: NATURAL) 
			-- Change the value of member `pagesize` to `a_value`.
		require
			exists: exists
		do
			set_c_pagesize (item, a_value)
		ensure
			pagesize_set: a_value = pagesize
		end

	pages: POINTER
			-- Access member `pages`
		require
			exists: exists
		do
			Result := c_pages (item) 
		ensure
		end

	set_pages (a_value: POINTER )
			-- Set member `pages`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_pages (item, a_value)
		ensure
			pages_set: pages = a_value 		end

	large_blocks: POINTER
			-- Access member `large_blocks`
		require
			exists: exists
		do
			Result := c_large_blocks (item) 
		ensure
		end

	set_large_blocks (a_value: POINTER )
			-- Set member `large_blocks`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_large_blocks (item, a_value)
		ensure
			large_blocks_set: large_blocks = a_value 		end

	next_page: INTEGER
			-- Access member `next_page`
		require
			exists: exists
		do
			Result := c_next_page (item)
		ensure
			result_correct: Result = c_next_page (item)
		end

	set_next_page (a_value: INTEGER) 
			-- Change the value of member `next_page` to `a_value`.
		require
			exists: exists
		do
			set_c_next_page (item, a_value)
		ensure
			next_page_set: a_value = next_page
		end

	alloc_block:  detachable C_STRING
			-- Access member `alloc_block`
		require
			exists: exists
		do
			if attached c_alloc_block (item) as l_ptr then
				create Result.make_by_pointer (l_ptr)
			end
		ensure
			result_void: Result = Void implies c_alloc_block (item) = default_pointer
			result_not_void: attached Result as l_result implies l_result.string.same_string ((create {C_STRING}.make_by_pointer (item)).string)
		end

	set_alloc_block (a_value: C_STRING) 
			-- Change the value of member `alloc_block` to `a_value`.
		require
			exists: exists
		do
			set_c_alloc_block (item, a_value.item )
		end

	alloc_used: NATURAL
			-- Access member `alloc_used`
		require
			exists: exists
		do
			Result := c_alloc_used (item)
		ensure
			result_correct: Result = c_alloc_used (item)
		end

	set_alloc_used (a_value: NATURAL) 
			-- Change the value of member `alloc_used` to `a_value`.
		require
			exists: exists
		do
			set_c_alloc_used (item, a_value)
		ensure
			alloc_used_set: a_value = alloc_used
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_pool_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_pool_t_)"
		end

	c_pagesize (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->pagesize
			]"
		end

	set_c_pagesize (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->pagesize =  (size_t)$a_value
			]"
		ensure
			pagesize_set: a_value = c_pagesize (an_item)
		end

	c_pages (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_pool_t_*)$an_item)->pages
			]"
		end

	set_c_pages (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->pages =  *(amqp_pool_blocklist_t*)$a_value
			]"
		end

	c_large_blocks (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_pool_t_*)$an_item)->large_blocks
			]"
		end

	set_c_large_blocks (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->large_blocks =  *(amqp_pool_blocklist_t*)$a_value
			]"
		end

	c_next_page (an_item: POINTER): INTEGER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->next_page
			]"
		end

	set_c_next_page (an_item: POINTER; a_value: INTEGER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->next_page =  (int)$a_value
			]"
		ensure
			next_page_set: a_value = c_next_page (an_item)
		end

	c_alloc_block (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->alloc_block
			]"
		end

	set_c_alloc_block (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->alloc_block =  (char*)$a_value
			]"
		ensure
			alloc_block_set: a_value = c_alloc_block (an_item)
		end

	c_alloc_used (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->alloc_used
			]"
		end

	set_c_alloc_used (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_pool_t_*)$an_item)->alloc_used =  (size_t)$a_value
			]"
		ensure
			alloc_used_set: a_value = c_alloc_used (an_item)
		end

end
