note

	description: "This file has been generated by WrapC. Do not edit. Changes will be lost!"

	generator: "Eiffel Wrapper Generator"

class AMQP_QUEUE_DECLARE_OK_T__STRUCT_API

inherit

	MEMORY_STRUCTURE

	
create

	make,
	make_by_pointer

feature -- Measurement

	structure_size: INTEGER 
		do
			Result := sizeof_external
		end

feature {ANY} -- Member Access

	queue: POINTER
			-- Access member `queue`
		require
			exists: exists
		do
			Result := c_queue (item) 
		ensure
		end

	set_queue (a_value: POINTER )
			-- Set member `queue`
		require
			a_value_not_void: a_value /= default_pointer
			exists: exists
		do
			set_c_queue (item, a_value)
		ensure
			queue_set: queue = a_value 		end

	message_count: NATURAL
			-- Access member `message_count`
		require
			exists: exists
		do
			Result := c_message_count (item)
		ensure
			result_correct: Result = c_message_count (item)
		end

	set_message_count (a_value: NATURAL) 
			-- Change the value of member `message_count` to `a_value`.
		require
			exists: exists
		do
			set_c_message_count (item, a_value)
		ensure
			message_count_set: a_value = message_count
		end

	consumer_count: NATURAL
			-- Access member `consumer_count`
		require
			exists: exists
		do
			Result := c_consumer_count (item)
		ensure
			result_correct: Result = c_consumer_count (item)
		end

	set_consumer_count (a_value: NATURAL) 
			-- Change the value of member `consumer_count` to `a_value`.
		require
			exists: exists
		do
			set_c_consumer_count (item, a_value)
		ensure
			consumer_count_set: a_value = consumer_count
		end

feature {NONE} -- Implementation wrapper for struct struct amqp_queue_declare_ok_t_

	sizeof_external: INTEGER 
		external
			"C inline use <amqp.h>"
		alias
			"sizeof(struct amqp_queue_declare_ok_t_)"
		end

	c_queue (an_item: POINTER): POINTER
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				&((struct amqp_queue_declare_ok_t_*)$an_item)->queue
			]"
		end

	set_c_queue (an_item: POINTER; a_value: POINTER) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_queue_declare_ok_t_*)$an_item)->queue =  *(amqp_bytes_t*)$a_value
			]"
		end

	c_message_count (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_queue_declare_ok_t_*)$an_item)->message_count
			]"
		end

	set_c_message_count (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_queue_declare_ok_t_*)$an_item)->message_count =  (uint32_t)$a_value
			]"
		ensure
			message_count_set: a_value = c_message_count (an_item)
		end

	c_consumer_count (an_item: POINTER): NATURAL
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_queue_declare_ok_t_*)$an_item)->consumer_count
			]"
		end

	set_c_consumer_count (an_item: POINTER; a_value: NATURAL) 
		require
			an_item_not_null: an_item /= default_pointer
		external
			"C inline use <amqp.h>"
		alias
			"[
				((struct amqp_queue_declare_ok_t_*)$an_item)->consumer_count =  (uint32_t)$a_value
			]"
		ensure
			consumer_count_set: a_value = c_consumer_count (an_item)
		end

end
